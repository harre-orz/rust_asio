{
  "name": "asio",
  "tagline": "",
  "body": "# asio - ASynchronous Input/Output library for Rust\r\n\r\n## Usage\r\n\r\nThe `asio` is not compatible to `Rust` stable version (ver 1.9). Please install a `Rust-nightly`.\r\n\r\nThis crate is on [github](https://github.com/harre-orz/rust_asio.git \"github\") and can be used by adding `asio` to the dependencies in your project's `Cargo.toml`.\r\n\r\n```toml\r\n[dependencies]\r\nrust_asio = \"0.1.1\"\r\n```\r\n\r\nAnd this in your crate root:\r\n\r\n```rust\r\nextern crate asio;\r\n```\r\n\r\nFor example, Connection with TCP socket code:\r\n\r\n```rust\r\nuse asio::*;\r\nuse asio::ip::*;\r\n\r\nstruct TcpClient(TcpSocket);\r\n\r\nimpl TcpClient {\r\n  fn start(io: &IoService) {\r\n    let soc = Strand::new(io, TcpClient(TcpSocket::new(Tcp::v4())));\r\n    let ep = TcpEndpoint::new((IpAddrV4::new(192.168.0.1), 12345));\r\n    TcpSocket::async_connect(|soc|, &soc.0, &ep, Self::on_connect, &soc);\r\n  }\r\n\r\n  fn on_connect(soc: Strand<Self>, io::Result<()>) {\r\n    match res {\r\n      Ok(_) => println!(\"connected.\");\r\n      Err(err) => println!(\"{:?}\", err);\r\n    }\r\n  }\r\n}\r\n\r\nfn main() {\r\n  let io = IoService::new();\r\n  TcpClient::start(&io);\r\n  io.run();\r\n}\r\n```\r\n\r\n## Features\r\n - Proactor design pattern based thread-safe asynchronous I/O.\r\n - Does not dependent on the number of threads.\r\n - Supported protocol is in TCP, UDP, Unix-domain socket and etc.\r\n - Supported timer is in system timer, steady timer.\r\n\r\n## Platforms\r\n\r\nCurrently supported platforms:\r\n - Linux (kernel in version >=2.6.27)\r\n\r\n## Future plans\r\n 1. BSD will support (kqueue support).\r\n 2. Signal will support.\r\n 3. SSL will support.\r\n 4. Generic protocol socket will support.\r\n 5. File descriptor socket will support.\r\n 6. Windows will support.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}